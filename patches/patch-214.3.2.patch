diff -uNr mDNSResponder-214.3.2/mDNSPosix/Identify.c mDNSResponder-214.3.2-Linux/mDNSPosix/Identify.c
--- mDNSResponder-214.3.2/mDNSPosix/Identify.c	2009-01-13 06:31:35.000000000 +0100
+++ mDNSResponder-214.3.2-Linux/mDNSPosix/Identify.c	2010-10-22 11:35:55.000000000 +0200
@@ -70,8 +70,10 @@
 // We want to use the functionality provided by "mDNS.c",
 // except we'll sneak a peek at the packets before forwarding them to the normal mDNSCoreReceive() routine
 #define mDNSCoreReceive __MDNS__mDNSCoreReceive
+#define UDPSocket_struct __UDPSocket_struct
 #include "mDNS.c"
 #undef mDNSCoreReceive
+#undef UDPSocket_struct
 
 //*************************************************************************************************************
 // Headers
diff -uNr mDNSResponder-214.3.2/mDNSPosix/NetMonitor.c mDNSResponder-214.3.2-Linux/mDNSPosix/NetMonitor.c
--- mDNSResponder-214.3.2/mDNSPosix/NetMonitor.c	2009-07-16 02:08:57.000000000 +0200
+++ mDNSResponder-214.3.2-Linux/mDNSPosix/NetMonitor.c	2010-10-22 11:43:04.000000000 +0200
@@ -110,8 +110,10 @@
 // We want to use much of the functionality provided by "mDNS.c",
 // except we'll steal the packets that would be sent to normal mDNSCoreReceive() routine
 #define mDNSCoreReceive __NOT__mDNSCoreReceive__NOT__
+#define UDPSocket_struct __UDPSocket_struct
 #include "mDNS.c"
 #undef mDNSCoreReceive
+#undef UDPSocket_struct
 
 //*************************************************************************************************************
 // Headers
diff -uNr mDNSResponder-214.3.2/mDNSPosix/PosixDaemon.c mDNSResponder-214.3.2-Linux/mDNSPosix/PosixDaemon.c
--- mDNSResponder-214.3.2/mDNSPosix/PosixDaemon.c	2009-04-30 22:07:51.000000000 +0200
+++ mDNSResponder-214.3.2-Linux/mDNSPosix/PosixDaemon.c	2010-10-22 11:07:38.000000000 +0200
@@ -104,6 +104,12 @@
 #include "PlatformCommon.h"
 
 #define CONFIG_FILE "/etc/mdnsd.conf"
+
+// service registration
+#define SERVICES_FILE "/etc/mdnsd-services.conf"
+static mStatus RegisterServicesInFile(const char *filePath);
+static void DeregisterOurServices(void);
+
 static domainname DynDNSZone;                // Default wide-area zone for service registration
 static domainname DynDNSHostname;
 
@@ -141,14 +147,20 @@
 static void Reconfigure(mDNS *m)
 	{
 	mDNSAddr DynDNSIP;
-	const mDNSAddr dummy = { mDNSAddrType_IPv4, { { { 1, 1, 1, 1 } } } };;
+   const mDNSAddr dummy = { mDNSAddrType_IPv4, { { { 1, 1, 1, 1 } } } };;
+   mDNSAddr router;
+   
 	mDNS_SetPrimaryInterfaceInfo(m, NULL, NULL, NULL);
 	if (ParseDNSServers(m, uDNS_SERVERS_FILE) < 0)
 		LogMsg("Unable to parse DNS server list. Unicast DNS-SD unavailable");
 	ReadDDNSSettingsFromConfFile(m, CONFIG_FILE, &DynDNSHostname, &DynDNSZone, NULL);
 	mDNSPlatformSourceAddrForDest(&DynDNSIP, &dummy);
 	if (DynDNSHostname.c[0]) mDNS_AddDynDNSHostName(m, &DynDNSHostname, NULL, NULL);
-	if (DynDNSIP.type)       mDNS_SetPrimaryInterfaceInfo(m, &DynDNSIP, NULL, NULL);
+	if (DynDNSIP.type) {
+	   int r = mDNS_PlatformGetGateway(NULL, &router, NULL);
+	   mDNS_SetPrimaryInterfaceInfo(m, &DynDNSIP, NULL, (mStatus_NoError == r) ? &router : NULL);
+	}
+	
 	mDNS_ConfigChanged(m);
 	}
 
@@ -247,10 +259,15 @@
 		else
 			LogMsg("WARNING: mdnsd continuing as root because user \"nobody\" does not exist");
 		}
+	
+   if(mStatus_NoError != RegisterServicesInFile(SERVICES_FILE))
+      LogMsg("Failed to register (some) services from %s.", SERVICES_FILE);
 
 	if (mStatus_NoError == err)
 		err = MainLoop(&mDNSStorage);
- 
+
+   DeregisterOurServices();
+   
 	LogMsg("%s stopping", mDNSResponderVersionString);
 
 	mDNS_Close(&mDNSStorage);
@@ -288,6 +305,324 @@
 	// No-op, for now
 	}
 
+// registering services from config file
+
+#include <assert.h>
+
+typedef struct PosixService PosixService;
+
+struct PosixService {
+    ServiceRecordSet coreServ;
+    PosixService *next;
+    int serviceID;
+};
+
+static PosixService *gServiceList = NULL;
+
+static void RegistrationCallback(mDNS *const m, ServiceRecordSet *const thisRegistration, mStatus status)
+    // mDNS core calls this routine to tell us about the status of 
+    // our registration.  The appropriate action to take depends 
+    // entirely on the value of status.
+{
+    switch (status) {
+
+        case mStatus_NoError:      
+            debugf("Callback: %##s Name Registered",   thisRegistration->RR_SRV.resrec.name->c); 
+            // Do nothing; our name was successfully registered.  We may 
+            // get more call backs in the future.
+            break;
+
+        case mStatus_NameConflict: 
+            debugf("Callback: %##s Name Conflict",     thisRegistration->RR_SRV.resrec.name->c); 
+
+            // In the event of a conflict, this sample RegistrationCallback 
+            // just calls mDNS_RenameAndReregisterService to automatically 
+            // pick a new unique name for the service. For a device such as a 
+            // printer, this may be appropriate.  For a device with a user 
+            // interface, and a screen, and a keyboard, the appropriate response 
+            // may be to prompt the user and ask them to choose a new name for 
+            // the service.
+            //
+            // Also, what do we do if mDNS_RenameAndReregisterService returns an 
+            // error.  Right now I have no place to send that error to.
+
+            status = mDNS_RenameAndReregisterService(m, thisRegistration, mDNSNULL);
+            assert(status == mStatus_NoError);
+            break;
+
+        case mStatus_MemFree:      
+            debugf("Callback: %##s Memory Free",       thisRegistration->RR_SRV.resrec.name->c); 
+
+            // When debugging is enabled, make sure that thisRegistration 
+            // is not on our gServiceList.
+
+            #if !defined(NDEBUG)
+                {
+                    PosixService *cursor;
+
+                    cursor = gServiceList;
+                    while (cursor != NULL) {
+                        assert(&cursor->coreServ != thisRegistration);
+                        cursor = cursor->next;
+                    }
+                }
+            #endif
+            free(thisRegistration);
+            break;
+
+        default:                   
+            debugf("Callback: %##s Unknown Status %ld", thisRegistration->RR_SRV.resrec.name->c, status); 
+            break;
+    }
+}
+
+static int gServiceID = 0;
+
+static mDNSBool CheckThatRichTextNameIsUsable(const char *richTextName, mDNSBool printExplanation)
+    // Checks that richTextName is reasonable 
+    // label and, if it isn't and printExplanation is true, prints 
+    // an explanation of why not.
+{    
+    mDNSBool result = mDNStrue;
+    if (result && strlen(richTextName) > 63) {
+        if (printExplanation) {
+            LogMsg("%s: Service name is too long (must be 63 characters or less)\n", 
+                    SERVICES_FILE);
+        }
+        result = mDNSfalse;
+    }
+    if (result && richTextName[0] == 0) {
+        if (printExplanation) {
+            LogMsg("%s: Service name can't be empty\n", SERVICES_FILE);
+        }
+        result = mDNSfalse;
+    }
+    return result;
+}
+
+static mDNSBool CheckThatServiceTypeIsUsable(const char *serviceType, mDNSBool printExplanation)
+    // Checks that serviceType is a reasonable service type 
+    // label and, if it isn't and printExplanation is true, prints 
+    // an explanation of why not.
+{
+    mDNSBool result;
+
+    result = mDNStrue;
+    if (result && strlen(serviceType) > 63) {
+        if (printExplanation) {
+            LogMsg("%s: Service type is too long (must be 63 characters or less)\n", 
+                    SERVICES_FILE);
+        }
+        result = mDNSfalse;
+    }
+    if (result && serviceType[0] == 0) {
+        if (printExplanation) {
+            LogMsg("%s: Service type can't be empty\n", 
+                    SERVICES_FILE);
+        }
+        result = mDNSfalse;
+    }
+    return result;
+}
+
+static mDNSBool CheckThatPortNumberIsUsable(long portNumber, mDNSBool printExplanation)
+    // Checks that portNumber is a reasonable port number
+    // and, if it isn't and printExplanation is true, prints 
+    // an explanation of why not.
+{
+    mDNSBool result;
+
+    result = mDNStrue;
+    if (result && (portNumber <= 0 || portNumber > 65535)) {
+        if (printExplanation) {
+               LogMsg("%s: Port number must be in range 1..65535\n", 
+                    SERVICES_FILE);
+        }
+        result = mDNSfalse;
+    }
+    return result;
+}
+
+static mDNSBool ReadALine(char *buf, size_t bufSize, FILE *fp)
+// Read a line, skipping over any blank lines or lines starting with '#'
+{
+	mDNSBool good, skip;
+	do {
+		good = (fgets(buf, bufSize, fp) != NULL);
+		skip = (good && (buf[0] == '#'));
+	} while (good && skip);
+	if (good)
+	{
+		int		len = strlen( buf);
+		if ( buf[len - 1] == '\r' || buf[len - 1] == '\n')
+			buf[len - 1] = '\0';
+	}
+    return good;
+}
+
+static mStatus RegisterOneService(const char *  richTextName, 
+                                  const char *  serviceType, 
+                                  const char *  serviceDomain, 
+                                  const mDNSu8  text[],
+                                  mDNSu16       textLen,
+                                  long          portNumber)
+{
+    mStatus             status;
+    PosixService *      thisServ;
+    domainlabel         name;
+    domainname          type;
+    domainname          domain;
+    
+    status = mStatus_NoError;
+    thisServ = (PosixService *) malloc(sizeof(*thisServ));
+    if (thisServ == NULL) {
+        status = mStatus_NoMemoryErr;
+    }
+    if (status == mStatus_NoError) {
+        MakeDomainLabelFromLiteralString(&name,  richTextName);
+        MakeDomainNameFromDNSNameString(&type, serviceType);
+        MakeDomainNameFromDNSNameString(&domain, serviceDomain);
+        status = mDNS_RegisterService(&mDNSStorage, &thisServ->coreServ,
+                &name, &type, &domain,				// Name, type, domain
+                NULL, mDNSOpaque16fromIntVal(portNumber),
+                text, textLen,						// TXT data, length
+                NULL, 0,							// Subtypes
+                mDNSInterface_Any,					// Interface ID
+                RegistrationCallback, thisServ);	// Callback and context
+    }
+    if (status == mStatus_NoError) {
+        thisServ->serviceID = gServiceID;
+        gServiceID += 1;
+
+        thisServ->next = gServiceList;
+        gServiceList = thisServ;
+
+        if (gMDNSPlatformPosixVerboseLevel > 0) {
+            LogMsg("%s: Registered service %d, name '%s', type '%s', port %ld\n", 
+                    SERVICES_FILE, 
+                    thisServ->serviceID, 
+                    richTextName,
+                    serviceType,
+                    portNumber);
+        }
+    } else {
+        if (thisServ != NULL) {
+            free(thisServ);
+        }
+    }
+    return status;
+}
+
+static const char kDefaultServiceDomain[] = "local.";
+
+static mStatus RegisterServicesInFile(const char *filePath)
+{
+    mStatus     status = mStatus_NoError;
+    FILE *      fp = fopen(filePath, "r");
+    int         junk;
+
+    if (fp == NULL) {
+        status = mStatus_UnknownErr;
+    }
+    if (status == mStatus_NoError) {
+        mDNSBool good = mDNStrue;
+        do {
+			int         ch;
+			char name[256];
+			char type[256];
+			const char *dom = kDefaultServiceDomain;
+			char rawText[1024];
+			mDNSu8  text[sizeof(RDataBody)];
+			unsigned int textLen = 0;
+			char port[256];
+
+            // Skip over any blank lines.
+            do ch = fgetc(fp); while ( ch == '\n' || ch == '\r' );
+            if (ch != EOF) good = (ungetc(ch, fp) == ch);
+
+            // Read three lines, check them for validity, and register the service.
+			good = ReadALine(name, sizeof(name), fp);               
+			if (good) {
+				good = ReadALine(type, sizeof(type), fp);
+			}
+			if (good) {
+				char *p = type;
+				while (*p && *p != ' ') p++;
+				if (*p) {
+					*p = 0;
+					dom = p+1;
+				}
+			}
+			if (good) {
+				good = ReadALine(port, sizeof(port), fp);
+			}
+			if (good) {
+				good =     CheckThatRichTextNameIsUsable(name, mDNSfalse)
+						&& CheckThatServiceTypeIsUsable(type, mDNSfalse)
+						&& CheckThatPortNumberIsUsable(atol(port), mDNSfalse);
+			}
+			if (good) {
+				while (1) {
+					int len;
+					if (!ReadALine(rawText, sizeof(rawText), fp)) break;
+					len = strlen(rawText);
+					if (len <= 255)
+						{
+						unsigned int newlen = textLen + 1 + len;
+						if (len == 0 || newlen >= sizeof(text)) break;
+						text[textLen] = len;
+						mDNSPlatformMemCopy(text + textLen + 1, rawText, len);
+						textLen = newlen;
+						}
+					else
+						LogMsg("%s: TXT attribute too long for name = %s, type = %s, port = %s\n", 
+							SERVICES_FILE, name, type, port);
+				}
+			}
+			if (good) {
+				status = RegisterOneService(name, type, dom, text, textLen, atol(port));
+				if (status != mStatus_NoError) {
+					LogMsg("%s: Failed to register service, name = %s, type = %s, port = %s\n", 
+							SERVICES_FILE, name, type, port);
+					status = mStatus_NoError;       // keep reading
+				}
+			}
+        } while (good && !feof(fp));
+
+        if ( ! good ) {
+            LogMsg("%s: Error reading service file %s\n", SERVICES_FILE, filePath);
+        }
+    }
+
+    if (fp != NULL) {
+        junk = fclose(fp);
+        assert(junk == 0);
+    }
+
+    return status;
+}
+
+static void DeregisterOurServices(void)
+{
+    PosixService *thisServ;
+    int thisServID;
+    
+    while (gServiceList != NULL) {
+        thisServ = gServiceList;
+        gServiceList = thisServ->next;
+
+        thisServID = thisServ->serviceID;
+        
+        mDNS_DeregisterService(&mDNSStorage, &thisServ->coreServ);
+
+        if (gMDNSPlatformPosixVerboseLevel > 0) {
+            LogMsg("%s: Deregistered service %d\n",
+                    SERVICES_FILE, 
+                    thisServ->serviceID);
+        }
+    }
+}
+
 #if _BUILDING_XCODE_PROJECT_
 // If the process crashes, then this string will be magically included in the automatically-generated crash log
 const char *__crashreporter_info__ = mDNSResponderVersionString_SCCS + 5;
diff -uNr mDNSResponder-214.3.2/mDNSPosix/mDNSPosix.c mDNSResponder-214.3.2-Linux/mDNSPosix/mDNSPosix.c
--- mDNSResponder-214.3.2/mDNSPosix/mDNSPosix.c	2009-01-25 04:16:46.000000000 +0100
+++ mDNSResponder-214.3.2-Linux/mDNSPosix/mDNSPosix.c	2010-10-31 15:40:16.000000000 +0100
@@ -200,6 +200,13 @@
 	};
 typedef struct IfChangeRec	IfChangeRec;
 
+// Platform-dependent low-level networking stuff
+
+mDNSlocal int SetupSocket(struct sockaddr *intfAddr, mDNSIPPort port, int interfaceIndex, int *sktPtr, mDNSIPPort* outport,
+                           mDNSBool joinMC);
+
+static struct UDPSocket_struct* PlatformUDPSockets = NULL;
+
 // Note that static data is initialized to zero in (modern) C.
 static fd_set			gEventFDs;
 static int				gMaxFD;					// largest fd in gEventFDs
@@ -269,7 +276,7 @@
 	PosixNetworkInterface * thisIntf = (PosixNetworkInterface *)(InterfaceID);
 	int sendingsocket = -1;
 
-	(void)src;	// Will need to use this parameter once we implement mDNSPlatformUDPSocket/mDNSPlatformUDPClose
+	//(void)src;	// Will need to use this parameter once we implement mDNSPlatformUDPSocket/mDNSPlatformUDPClose
 
 	assert(m != NULL);
 	assert(msg != NULL);
@@ -286,7 +293,7 @@
 		sin->sin_family         = AF_INET;
 		sin->sin_port           = dstPort.NotAnInteger;
 		sin->sin_addr.s_addr    = dst->ip.v4.NotAnInteger;
-		sendingsocket           = thisIntf ? thisIntf->multicastSocket4 : m->p->unicastSocket4;
+		sendingsocket           = (src) ? (src->sktv4) : (thisIntf ? thisIntf->multicastSocket4 : m->p->unicastSocket4);
 		}
 
 #if HAVE_IPV6
@@ -300,7 +307,7 @@
 		sin6->sin6_family         = AF_INET6;
 		sin6->sin6_port           = dstPort.NotAnInteger;
 		sin6->sin6_addr           = *(struct in6_addr*)&dst->ip.v6;
-		sendingsocket             = thisIntf ? thisIntf->multicastSocket6 : m->p->unicastSocket6;
+		sendingsocket             = (src) ? (src->sktv6) : (thisIntf ? thisIntf->multicastSocket6 : m->p->unicastSocket6);
 		}
 #endif
 
@@ -330,7 +337,7 @@
 	}
 
 // This routine is called when the main loop detects that data is available on a socket.
-mDNSlocal void SocketDataReady(mDNS *const m, PosixNetworkInterface *intf, int skt)
+mDNSlocal void SocketDataReady(mDNS *const m, PosixNetworkInterface *intf, int skt, mDNSIPPort localPort)
 	{
 	mDNSAddr   senderAddr, destAddr;
 	mDNSIPPort senderPort;
@@ -426,7 +433,7 @@
 
 	if (packetLen >= 0)
 		mDNSCoreReceive(m, &packet, (mDNSu8 *)&packet + packetLen,
-			&senderAddr, senderPort, &destAddr, MulticastDNSPort, InterfaceID);
+			&senderAddr, senderPort, &destAddr, mDNSIPPortIsZero(localPort) ? MulticastDNSPort : localPort, InterfaceID);
 	}
 
 mDNSexport TCPSocket *mDNSPlatformTCPSocket(mDNS * const m, TCPSocketFlags flags, mDNSIPPort * port)
@@ -434,6 +441,7 @@
 	(void)m;			// Unused
 	(void)flags;		// Unused
 	(void)port;			// Unused
+   LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return NULL;
 	}
 
@@ -441,12 +449,14 @@
 	{
 	(void)flags;		// Unused
 	(void)sd;			// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return NULL;
 	}
 
 mDNSexport int mDNSPlatformTCPGetFD(TCPSocket *sock)
 	{
 	(void)sock;			// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return -1;
 	}
 
@@ -459,11 +469,13 @@
 	(void)InterfaceID;	// Unused
 	(void)callback;		// Unused
 	(void)context;		// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return(mStatus_UnsupportedErr);
 	}
 
 mDNSexport void mDNSPlatformTCPCloseConnection(TCPSocket *sock)
 	{
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	(void)sock;			// Unused
 	}
 
@@ -473,6 +485,7 @@
 	(void)buf;			// Unused
 	(void)buflen;		// Unused
 	(void)closed;		// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return 0;			
 	}
 
@@ -481,25 +494,93 @@
 	(void)sock;			// Unused
 	(void)msg;			// Unused
 	(void)len;			// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return 0;
 	}
 
-mDNSexport UDPSocket *mDNSPlatformUDPSocket(mDNS * const m, mDNSIPPort port)
-	{
-	(void)m;			// Unused
-	(void)port;			// Unused
-	return NULL;
-	}
-
-mDNSexport void           mDNSPlatformUDPClose(UDPSocket *sock)
-	{
-	(void)sock;			// Unused
-	}
+mDNSexport UDPSocket *mDNSPlatformUDPSocket(mDNS * const m, mDNSIPPort requestedPort)
+{
+   mStatus err;
+   mDNSIPPort port = requestedPort;
+   mDNSBool randomizePort = mDNSIPPortIsZero(requestedPort);
+   struct sockaddr sa;
+   int i = 1000; // Try at most 1000 times to get a unique random port
+   UDPSocket *p = mallocL("UDPSocket", sizeof(UDPSocket));
+   if (!p) { LogMsg("mDNSPlatformUDPSocket: memory exhausted"); return(mDNSNULL); }
+   mDNSPlatformMemZero(p, sizeof(UDPSocket));
+   p->port  = zeroIPPort;
+   p->sktv4 = -1;
+   p->sktv6 = -1;
+
+   (void)m;
+
+   do
+   	{
+   	// The kernel doesn't do cryptographically strong random port allocation, so we do it ourselves here
+   	if (randomizePort) port = mDNSOpaque16fromIntVal(0xC000 + mDNSRandom(0x3FFF));
+      mDNSPlatformMemZero(&sa, sizeof(struct sockaddr));
+      sa.sa_family = AF_INET;
+   	err = SetupSocket(&sa, port, 0, &p->sktv4, &p->port, mDNSSameIPPort(requestedPort, NATPMPAnnouncementPort));
+   	/* TODO: make me work!
+   	if (!err)
+   		{
+		   mDNSPlatformMemZero(&sa, sizeof(struct sockaddr));
+         sa.sa_family = AF_INET6;
+   		err = SetupSocket(&sa, port, 0, &p->sktv6, &p->port, 0);
+   		if (err) { close(p->sktv4); p->sktv4 = -1; }
+   		}*/
+   	i--;
+   	} while (err == EADDRINUSE && randomizePort && i);
+
+   if (err)
+   	{
+   	// In customer builds we don't want to log failures with port 5351, because this is a known issue
+   	// of failing to bind to this port when Internet Sharing has already bound to it
+   	// We also don't want to log about port 5350, due to a known bug when some other
+   	// process is bound to it.
+   	if (mDNSSameIPPort(requestedPort, NATPMPPort) || mDNSSameIPPort(requestedPort, NATPMPAnnouncementPort))
+   		LogInfo("mDNSPlatformUDPSocket: SetupSocket %d failed error %d errno %d (%s)", mDNSVal16(requestedPort), err, errno, strerror(errno));
+   	else LogMsg("mDNSPlatformUDPSocket: SetupSocket %d failed error %d errno %d (%s)", mDNSVal16(requestedPort), err, errno, strerror(errno));
+   	freeL("UDPSocket", p);
+   	return(mDNSNULL);
+   	}
+   
+   p->prev = NULL;
+   p->next = PlatformUDPSockets;
+   if (p->next)
+      p->next->prev = p;
+   PlatformUDPSockets = p;
+   
+   return(p);
+}
+
+mDNSexport void mDNSPlatformUDPClose(UDPSocket *sock)
+{
+   if (sock->sktv4 > -1) {
+      close(sock->sktv4);
+      sock->sktv4 = -1;
+   }
+   if (sock->sktv6 > -1) {
+      close(sock->sktv6);
+      sock->sktv6 = -1;
+   }
+   
+   if (sock->prev)
+      sock->prev->next = sock->next;
+   else
+      PlatformUDPSockets = sock->next;
+   
+   if (sock->next)
+      sock->next->prev = sock->prev;
+   
+   freeL("UDPSocket", sock);
+}
 	
 mDNSexport void mDNSPlatformUpdateProxyList(mDNS *const m, const mDNSInterfaceID InterfaceID)
 	{
 	(void)m;			// Unused
 	(void)InterfaceID;			// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	}
 
 mDNSexport void mDNSPlatformSendRawPacket(const void *const msg, const mDNSu8 *const end, mDNSInterfaceID InterfaceID)
@@ -507,6 +588,7 @@
 	(void)msg;			// Unused
 	(void)end;			// Unused
 	(void)InterfaceID;			// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	}
 	
 mDNSexport void mDNSPlatformSetLocalARP(const mDNSv4Addr *const tpa, const mDNSEthAddr *const tha, mDNSInterfaceID InterfaceID)
@@ -514,15 +596,18 @@
 	(void)tpa;			// Unused
 	(void)tha;			// Unused
 	(void)InterfaceID;			// Unused
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	}	
 
 mDNSexport mStatus mDNSPlatformTLSSetupCerts(void)
 	{
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	return(mStatus_UnsupportedErr);
 	}
 	
 mDNSexport void mDNSPlatformTLSTearDownCerts(void)
 	{
+	   LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	}
 
 #if COMPILER_LIKES_PRAGMA_MARK
@@ -539,20 +624,108 @@
 	(void) BrowseDomains;
 	}
 
+#ifdef TARGET_OS_LINUX
+#include <ctype.h>
+#endif
+
 mDNSexport mStatus mDNSPlatformGetPrimaryInterface(mDNS * const m, mDNSAddr * v4, mDNSAddr * v6, mDNSAddr * router)
+#ifdef TARGET_OS_LINUX
+{
+   unsigned long d, g;
+   char buf[256];
+   int line = 0;
+   FILE * f;
+   char * p;
+
+   (void)m;
+
+   // TODO: where/how to get ipv6 address?
+   if (v6)
+      *v6 = zeroAddr;
+
+   f = fopen("/proc/net/route", "r");
+
+   if (!f)
+      return mStatus_UnknownErr;
+
+   while(fgets(buf, sizeof(buf), f)) {
+      if(line > 0) {  /* skip the first line */
+         p = buf;
+
+         /* skip the interface name */
+         while(*p && !isspace(*p))
+            p++;
+
+         *p++ = '\0';
+
+         while(*p && isspace(*p))
+            p++;
+
+         if(sscanf(p, "%lx%lx", &d, &g)==2) {
+            if(d == 0 && g != 0) {
+               if (router) {
+                  router->type = mDNSAddrType_IPv4;
+                  router->ip.v4.NotAnInteger = g;
+               }
+               fclose(f);
+               
+               int sock = socket(AF_INET, SOCK_DGRAM, 0);
+               if (sock > -1) {
+                  struct sockaddr_in sin;
+                  socklen_t socklen = sizeof(struct sockaddr_in);
+                  
+                  mDNSPlatformMemZero(&sin, socklen);
+                  sin.sin_port = htons(3000);
+                  sin.sin_addr.s_addr = INADDR_ANY;
+                  sin.sin_family = AF_INET;
+                  
+                  
+                  if (connect(sock, (struct sockaddr*)&sin, socklen) >= 0 &&
+                      getsockname(sock, (struct sockaddr*)&sin, &socklen) >= 0) {
+                     
+                     if (v4) {
+                        v4->type = mDNSAddrType_IPv4;
+                        v4->ip.v4.NotAnInteger = sin.sin_addr.s_addr;
+                     }
+                     
+                     return mStatus_NoError;
+                  }
+                  
+                  close(sock);
+               }
+               
+               return mStatus_UnknownErr;
+            }
+         }
+      }
+
+   line++;
+   }
+
+   /* default route not found ! */
+   if (f)
+      fclose(f);
+
+   return mStatus_UnknownErr;
+}
+#else
 	{
 	(void) m;
 	(void) v4;
 	(void) v6;
 	(void) router;
 
+   LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
+
 	return mStatus_UnsupportedErr;
 	}
+#endif
 
 mDNSexport void mDNSPlatformDynDNSHostNameStatusChanged(const domainname *const dname, const mStatus status)
 	{
 	(void) dname;
 	(void) status;
+	LogMsg("%s:%s(): NOT IMPLEMENTED!", __FILE__, __FUNCTION__);
 	}
 
 #if COMPILER_LIKES_PRAGMA_MARK
@@ -599,6 +772,8 @@
 			mDNS_AddDNSServer(m, NULL, mDNSInterface_Any, &DNSAddr, UnicastDNSPort);
 			numOfServers++;
 			}
+			
+			keyword[0] = nameserver[0] = 0;
 		}  
 	return (numOfServers > 0) ? 0 : -1;
 	}
@@ -684,13 +859,14 @@
 // Sets up a send/receive socket.
 // If mDNSIPPort port is non-zero, then it's a multicast socket on the specified interface
 // If mDNSIPPort port is zero, then it's a randomly assigned port number, used for sending unicast queries
-mDNSlocal int SetupSocket(struct sockaddr *intfAddr, mDNSIPPort port, int interfaceIndex, int *sktPtr)
+mDNSlocal int SetupSocket(struct sockaddr *intfAddr, mDNSIPPort port, int interfaceIndex, int *sktPtr, mDNSIPPort* outport, mDNSBool joinMC)
 	{
 	int err = 0;
 	static const int kOn = 1;
 	static const int kIntTwoFiveFive = 255;
 	static const unsigned char kByteTwoFiveFive = 255;
-	const mDNSBool JoinMulticastGroup = (port.NotAnInteger != 0);
+	const mDNSBool JoinMulticastGroup = joinMC; // was: (port.NotAnInteger != 0);
+   const mDNSBool isNATPMPAnnouncePort = mDNSSameIPPort(port, NATPMPAnnouncementPort);
 	
 	(void) interfaceIndex;	// This parameter unused on plaforms that don't have IPv6
 	assert(intfAddr != NULL);
@@ -756,7 +932,7 @@
 		// Add multicast group membership on this interface
 		if (err == 0 && JoinMulticastGroup)
 			{
-			imr.imr_multiaddr.s_addr = AllDNSLinkGroup_v4.ip.v4.NotAnInteger;
+			imr.imr_multiaddr.s_addr = isNATPMPAnnouncePort ? AllSystemsMcast.NotAnInteger :  AllDNSLinkGroup_v4.ip.v4.NotAnInteger;
 			imr.imr_interface        = ((struct sockaddr_in*)intfAddr)->sin_addr;
 			err = setsockopt(*sktPtr, IPPROTO_IP, IP_ADD_MEMBERSHIP, &imr, sizeof(imr));
 			if (err < 0) { err = errno; perror("setsockopt - IP_ADD_MEMBERSHIP"); }
@@ -791,9 +967,10 @@
 			{
 			bindAddr.sin_family      = AF_INET;
 			bindAddr.sin_port        = port.NotAnInteger;
-			bindAddr.sin_addr.s_addr = INADDR_ANY; // Want to receive multicasts AND unicasts on this socket
+			bindAddr.sin_addr.s_addr =  isNATPMPAnnouncePort ? AllSystemsMcast.NotAnInteger : INADDR_ANY;
 			err = bind(*sktPtr, (struct sockaddr *) &bindAddr, sizeof(bindAddr));
 			if (err < 0) { err = errno; perror("bind"); fflush(stderr); }
+			if (outport) outport->NotAnInteger = bindAddr.sin_port;
 			}
 		} // endif (intfAddr->sa_family == AF_INET)
 
@@ -957,10 +1134,10 @@
 	if (err == 0)
 		{
 		if (alias->multicastSocket4 == -1 && intfAddr->sa_family == AF_INET)
-			err = SetupSocket(intfAddr, MulticastDNSPort, intf->index, &alias->multicastSocket4);
+			err = SetupSocket(intfAddr, MulticastDNSPort, intf->index, &alias->multicastSocket4, NULL, 1);
 #if HAVE_IPV6
 		else if (alias->multicastSocket6 == -1 && intfAddr->sa_family == AF_INET6)
-			err = SetupSocket(intfAddr, MulticastDNSPort, intf->index, &alias->multicastSocket6);
+			err = SetupSocket(intfAddr, MulticastDNSPort, intf->index, &alias->multicastSocket6, NULL, 1);
 #endif
 		}
 
@@ -1318,11 +1495,11 @@
 
 	sa.sa_family = AF_INET;
 	m->p->unicastSocket4 = -1;
-	if (err == mStatus_NoError) err = SetupSocket(&sa, zeroIPPort, 0, &m->p->unicastSocket4);
+	if (err == mStatus_NoError) err = SetupSocket(&sa, zeroIPPort, 0, &m->p->unicastSocket4, NULL, 0);
 #if HAVE_IPV6
 	sa.sa_family = AF_INET6;
 	m->p->unicastSocket6 = -1;
-	if (err == mStatus_NoError) err = SetupSocket(&sa, zeroIPPort, 0, &m->p->unicastSocket6);
+	if (err == mStatus_NoError) err = SetupSocket(&sa, zeroIPPort, 0, &m->p->unicastSocket6, NULL, 0);
 #endif
 
 	// Tell mDNS core about the network interfaces on this machine.
@@ -1499,6 +1676,16 @@
 #endif
 		info = (PosixNetworkInterface *)(info->coreIntf.next);
 		}
+	
+   UDPSocket* socks = PlatformUDPSockets;
+   while (socks) {
+      if (socks->sktv4 > -1) mDNSPosixAddToFDSet(nfds, readfds, socks->sktv4);
+#if HAVE_IPV6
+      if (socks->sktv6 > -1) mDNSPosixAddToFDSet(nfds, readfds, socks->sktv6);
+#endif
+      
+      socks = socks->next;
+   }
 
 	// 3. Calculate the time remaining to the next scheduled event (in struct timeval format)
 	ticks = nextevent - mDNS_TimeNow(m);
@@ -1522,13 +1709,13 @@
 	if (m->p->unicastSocket4 != -1 && FD_ISSET(m->p->unicastSocket4, readfds))
 		{
 		FD_CLR(m->p->unicastSocket4, readfds);
-		SocketDataReady(m, NULL, m->p->unicastSocket4);
+		SocketDataReady(m, NULL, m->p->unicastSocket4, zeroIPPort);
 		}
 #if HAVE_IPV6
 	if (m->p->unicastSocket6 != -1 && FD_ISSET(m->p->unicastSocket6, readfds))
 		{
 		FD_CLR(m->p->unicastSocket6, readfds);
-		SocketDataReady(m, NULL, m->p->unicastSocket6);
+		SocketDataReady(m, NULL, m->p->unicastSocket6, zeroIPPort);
 		}
 #endif
 
@@ -1537,17 +1724,33 @@
 		if (info->multicastSocket4 != -1 && FD_ISSET(info->multicastSocket4, readfds))
 			{
 			FD_CLR(info->multicastSocket4, readfds);
-			SocketDataReady(m, info, info->multicastSocket4);
+			SocketDataReady(m, info, info->multicastSocket4, zeroIPPort);
 			}
 #if HAVE_IPV6
 		if (info->multicastSocket6 != -1 && FD_ISSET(info->multicastSocket6, readfds))
 			{
 			FD_CLR(info->multicastSocket6, readfds);
-			SocketDataReady(m, info, info->multicastSocket6);
+			SocketDataReady(m, info, info->multicastSocket6, zeroIPPort);
 			}
 #endif
 		info = (PosixNetworkInterface *)(info->coreIntf.next);
 		}
+		
+		UDPSocket* socks = PlatformUDPSockets;
+      while (socks) {
+         if (socks->sktv4 > -1 && FD_ISSET(socks->sktv4, readfds)) {
+            FD_CLR(socks->sktv4, readfds);
+            SocketDataReady(m, NULL, socks->sktv4, socks->port);
+         }
+#if HAVE_IPV6
+         if (socks->sktv6 > -1 && FD_ISSET(socks->sktv6, readfds)) {
+            FD_CLR(socks->sktv6, readfds);
+            SocketDataReady(m, NULL, socks->sktv6, socks->port);
+         }
+#endif
+
+         socks = socks->next;
+      }
 	}
 
 // update gMaxFD
@@ -1688,3 +1891,70 @@
 
 	return mStatus_NoError;
 	}
+
+#ifdef TARGET_OS_LINUX
+int mDNS_PlatformGetGateway(const char* ifname, mDNSAddr* v4, mDNSAddr* v6)
+{
+   unsigned long d, g;
+   char buf[256];
+   int line = 0;
+   FILE * f;
+   char * p;
+
+   // TODO: how to get v6 address?
+   if (v6)
+      *v6 = zeroAddr;
+
+   f = fopen("/proc/net/route", "r");
+
+   if (!f)
+      return mStatus_UnknownErr;
+
+   while(fgets(buf, sizeof(buf), f)) {
+      if(line > 0) {  /* skip the first line */
+         p = buf;
+
+         /* skip the interface name */
+         while(*p && !isspace(*p))
+            p++;
+
+         if (ifname) {
+            *p = '\0';
+            if (strcmp(ifname, buf))
+               continue;
+            else
+               *p = ' ';
+         }
+
+         while(*p && isspace(*p))
+            p++;
+
+         // TODO: how to actually get the router address if it's NOT the
+         // default route (e.g. 0.0.0.0)
+         if(sscanf(p, "%lx%lx", &d, &g)==2) {
+            if(d == 0 && g != 0) { /* default */
+               if (v4) {
+                  v4->type = mDNSAddrType_IPv4;
+                  v4->ip.v4.NotAnInteger = g;
+               }
+               fclose(f);
+               return mStatus_NoError;
+            }
+         }
+      }
+
+   line++;
+   }
+
+   /* default route not found ! */
+   if (f)
+      fclose(f);
+
+   return mStatus_UnknownErr;
+}
+#else
+int mDNS_PlatformGetGateway(const char* ifname, in_addr_t * addr)
+{
+   return -1;
+}
+#endif
diff -uNr mDNSResponder-214.3.2/mDNSPosix/mDNSPosix.h mDNSResponder-214.3.2-Linux/mDNSPosix/mDNSPosix.h
--- mDNSResponder-214.3.2/mDNSPosix/mDNSPosix.h	2007-04-22 22:15:46.000000000 +0200
+++ mDNSResponder-214.3.2-Linux/mDNSPosix/mDNSPosix.h	2010-10-19 00:41:55.000000000 +0200
@@ -119,6 +119,17 @@
 #endif
 	};
 
+// Platform-specific low-level networking code
+
+struct UDPSocket_struct {
+  mDNSIPPort port;
+  int sktv4;
+  int sktv6;
+  
+  struct UDPSocket_struct* next;
+  struct UDPSocket_struct* prev;
+};
+
 #define uDNS_SERVERS_FILE "/etc/resolv.conf"
 extern int ParseDNSServers(mDNS *m, const char *filePath);
 extern mStatus mDNSPlatformPosixRefreshInterfaceList(mDNS *const m);
@@ -141,6 +152,8 @@
 extern mStatus mDNSPosixIgnoreSignalInEventLoop( int signum);
 extern mStatus mDNSPosixRunEventLoopOnce( mDNS *m, const struct timeval *pTimeout, sigset_t *pSignalsReceived, mDNSBool *pDataDispatched);
 
+int mDNS_PlatformGetGateway(const char* ifname, mDNSAddr* v4, mDNSAddr* v6);
+
 #ifdef  __cplusplus
     }
 #endif
diff -uNr mDNSResponder-214.3.2/mDNSShared/PlatformCommon.c mDNSResponder-214.3.2-Linux/mDNSShared/PlatformCommon.c
--- mDNSResponder-214.3.2/mDNSShared/PlatformCommon.c	2009-04-11 02:20:29.000000000 +0200
+++ mDNSResponder-214.3.2-Linux/mDNSShared/PlatformCommon.c	2010-10-22 11:17:42.000000000 +0200
@@ -175,6 +175,9 @@
 mDNSexport void ReadDDNSSettingsFromConfFile(mDNS *const m, const char *const filename, domainname *const hostname, domainname *const domain, mDNSBool *DomainDiscoveryDisabled)
 	{
 	char buf[MAX_ESCAPED_DOMAIN_NAME] = "";
+   char knn[MAX_ESCAPED_DOMAIN_NAME] = "";
+   domainname keyName;
+   keyName.c[0] = knn[0] = 0;
 	mStatus err;
 	FILE *f = fopen(filename, "r");
 
@@ -189,6 +192,8 @@
 		if (domain && GetConfigOption(buf, "zone", f) && !MakeDomainNameFromDNSNameString(domain, buf)) goto badf;
 		buf[0] = 0;
 		GetConfigOption(buf, "secret-64", f);  // failure means no authentication
+      if (GetConfigOption(knn, "secret-name", f))
+         MakeDomainNameFromDNSNameString(&keyName, knn);
 		fclose(f);
 		f = NULL;
 		}
@@ -202,7 +207,7 @@
 		{
 		DomainAuthInfo *info = (DomainAuthInfo*)mDNSPlatformMemAllocate(sizeof(*info));
 		// for now we assume keyname = service reg domain and we use same key for service and hostname registration
-		err = mDNS_SetSecretForDomain(m, info, domain, domain, buf, mDNSfalse);
+		err = mDNS_SetSecretForDomain(m, info, domain, (keyName.c[0] ? &keyName : domain), buf, mDNSfalse);
 		if (err) LogMsg("ERROR: mDNS_SetSecretForDomain returned %d for domain %##s", err, domain->c);
 		}
 
